require 'chefspec'
require_relative 'spec_helper'

describe 'strainer-berkshelf-chefspec-recursive-bug::stub_data_bag' do

  let(:described_recipe) { 'strainer-berkshelf-chefspec-recursive-bug::stub_data_bag' } # Override since Chefspec seems to set 'described_recipe' to the context block description, which isn't what we want in this use case

  let(:demo_user_data_bag) {
      {"id"=>"demo",
         "groups"=>["demo"],
         "uid"=>1021,
         "gid"=>1021,
         "shell"=>"/bin/bash",
         "comment"=>"Demo Account",
         "password"=>"!!",
         "ssh_keys"=>
           ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDMXmEnQOf6GzmdrSVQ+CCjDeEX7hJZ23zKA3yRjzu8dCmZ4m58+dbnpFbz3tpiYk3tFs0sOPYbkFQWXPfTSpRBTyORjoZz96h1IOUUNgxqnB7ARxe1j1ihJ/wYSD2RObHWqFby2SULLu9eA9xt38lKO6ePjnKj+a0V1LCPXuR14Q== demouser@example.com",
            "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDHg8TPVCLWX7xkFYG+z01hx3T7nYVU7r7xCoY3BwqAGPshYJxU+hq3PFfR2qKGkGFDfxPbhmFIaKJQobzYKhlMP0bP/FPg0dxU7WQTlBNkVGPrh0ZcRN9Fs3nubfM/mvxFDHYNN6ugG887DL43CGQnJI1FMQhV60s4ALfvSINwZQ== stubbed data bag key"
           ]
       }
    }
  let(:filename) { "/home/#{demo_user_data_bag['id']}/.ssh/authorized_keys" }

  context 'with a stubbed data bag' do
    let(:chef_run) {
      stub_data_bag( ['users', 'demo'], demo_user_data_bag )
      chef_run = create_chefspec_runner
      chef_run.converge described_recipe
    }
  
    it 'should use the stubbed data bag' do
        expected_content = "# Generated by Chef for chefspec.local\n# Local modifications will be overwritten.\n\n"
        Array(demo_user_data_bag['ssh_keys']).each do |key|
          expected_content << key << "\n"
        end
        
        authorized_keys_file = chef_run.template(filename)
        
        expect(chef_run).to create_file filename
        expect(authorized_keys_file).to be_owned_by(demo_user_data_bag['uid'], demo_user_data_bag['gid'])
        authorized_keys_file.mode.should eq 0600
        
        expect(chef_run).to create_file_with_content filename, expected_content
    end
  end

  context 'without a stubbed data bag' do
    let(:chef_run) {
      chef_run = create_chefspec_runner
      chef_run.converge described_recipe
    }

    it 'should use the integration test data bag' do
        expected_content = "# Generated by Chef for chefspec.local\n# Local modifications will be overwritten.\n\n"
        expected_content << demo_user_data_bag['ssh_keys'][0] << "\n"  # Only 1 key is in the integration test data bag
        
        authorized_keys_file = chef_run.template(filename)
        
        expect(chef_run).to create_file filename
        expect(authorized_keys_file).to be_owned_by(1020, 1020) # Different uid & gid are in the integration test data bag
        authorized_keys_file.mode.should eq 0600
        
        expect(chef_run).to create_file_with_content filename, expected_content
    end
  end

end
